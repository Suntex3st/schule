#  create.cc $
#include "karton.hpp"
// create x items and return an arrays with the resulting kartons
long create
(karton *Karton, long how_many, long weight)
{
  // out counter to know when we need to create a new karton
  int item_counter=0;
  long items_created;
  while ( how_many > 0)
    {
      Karton->Items[item_counter].weight=weight;
      Karton->Items[item_counter].price=7.82;
      item_counter++;
      if ( item_counter  == 12 )
	{
	  Karton++;
	  how_many--;
	  item_counter=0;
	}
      items_created;

    }	
  return items_created;
}


#  input.cc $
#include "karton.hpp"
// write vars to our struct
bool Sinput(input *Input)
{
  cout << "How  many items do you wan't?" << endl;
  cin  >> Input->quantity;
  if (Input->quantity == 0 )
    return false;

  cout << "What's the weight of one item?";
  cin  >> Input->weight;

  cout << "How long is your track?";
  cin  >> Input->track_lenght;
  
  return true;
}


#  karton.hpp $
/*
  Item
  Item Weight 
  Items 
  Items Weight
  
  Item per carton: 12
  Carton weight: 24kg
  
  round at: 100kg

  discount: 3%, at 10k
  discount: 5%, at 10k+ till 50k
  discount: 7%, at 50,001 

  
 */


#ifndef KARTON_HPP
#define KARTON_HPP
using namespace std;
#include <iostream>
/*
  price of our item 7.85â‚¬
  
*/
typedef struct {
  double price;
  long weight;;
} item;


/*
  define our karton:
  weight is counted in gramm
  base weight is 24k gramm
*/

typedef struct {
  long weight=24;
  item  Items[12];
} karton;

/*
  struct for result with:
*/
typedef struct {
  long weight; // weight
  long rweight; // rounded weight
  double wprice; // weight price
  double price; //  ware price
  double fprice; // final price 
  double discount; // discount
  double how_many;
  long track_lenght;
 } stack;

typedef struct {
  long quantity=0;
  long track_lenght;
  long how_many;
  long weight;
} input;
long create(karton *Karton,long quantity, long weight);
bool Sinput(input *Input);
void output(stack *Stack);
#endif


#  main.cc $

#include "karton.hpp"
#define MAX_RUNS 20
int main()
{
  /*
    DESCRIPTION
      quantity      : how many items we create
      weight        : how heavy they are
      how_many      : how many boxes we get
      item_counter  : counts till we get 12 items (see below why)
      Karton        : our karton
      *_Karton      : the address of our Karton
      Stack         : our stack full of trash to count
      *_Stack       : pointer to stack
   */
  long how_many=0, items_got;
  int item_counter=0;
  int runs=MAX_RUNS;
  stack * Stack;
  input * Input;
  karton * Karton;

  while (runs != 0 )
    {
      stack * Stack = new stack;
      input * Input = new input;
      if (!Sinput(Input)) // if Sinput returns false Quit
	{
	  delete Stack;
	  delete Input;
	  return 0;
	}
      Stack->how_many=Input->quantity/12+1;
      how_many=Stack->how_many;
      Stack->track_lenght = Input->track_lenght; 
      karton * Karton = new karton[how_many];
      // lets create our kartons with their items
      items_got=create(Karton,how_many,Input->weight);
      //     cout << Karton[0].Item
      // now count how much weight we got
      while ( how_many > 0 || items_got > 0 )
	{
	  Stack->weight+=Karton->Items[item_counter].weight;
	  Stack->price+=Karton->Items[item_counter].price;
	  
	  /* if we are at the 12th item: 
	     lets go to the next karton and add the weight of the karton
	  */
	  item_counter++;
	  if ( item_counter == 12 )
	    {
	      item_counter=0;
	      Stack->weight+=Karton->weight;
	      Karton++;
	      how_many--;
	    }
	  items_got--;
	}
      Stack->rweight  = ((Stack->weight + 50) / 100) * 100;
      Stack->wprice   = (Stack->rweight / 100) * 0.06;
      Stack->fprice   = Stack->wprice + Stack->price;
      if ( Stack->fprice > 50000  )
	Stack->fprice-=(Stack->fprice/100)*7;
      else
	{
	  if ( Stack->fprice > 10000 )
	    Stack->fprice-=(Stack->fprice/100)*5;
	  else
	    if (Stack->fprice == 10000)
	      Stack->fprice-=(Stack->fprice/100)*3;
	}

      output(Stack);
      runs--;
      how_many=0;
      item_counter=0;
      Karton=0;
      delete Stack;
      delete Input;
      delete Karton;
    }
  return 0;
}
  


#  Makefile $
CXX=g++
TARGET=karton
OBJS=create.o input.o main.o output.o
CXXFLAGS=-std=c++11

all: $(TARGET)

%.o: %.cc
	$(CXX) $(CXXFLAGS) -c  $<  -o $@

clean:
	rm -f $(TARGET)
	rm -rf $(OBJS)

$(TARGET): $(OBJS)
	$(CXX) $(CXXFLAGS) $(OBJS) -o $@


.PHONY: all clean


#  output.cc $
#include "karton.hpp"
void output(stack *Stack)
{
  cout << "-------------------------------------------------" << endl;
  cout << "We got " << Stack->how_many << " kartons" << endl;
  cout << "Kilometers :" << Stack->track_lenght << endl;
  cout << "Weight :" << Stack->weight << endl;
  cout << "rounded weight: " << Stack->rweight << endl;
  cout << "weight price: " << Stack->wprice << endl; 
  cout << "Netto profit:" << Stack->price << endl;
  cout << "Profit + Weight:" << Stack->wprice + Stack->price << endl;
  cout << "Discount :" << Stack->discount  << endl;
  cout << "Final Price " << Stack->fprice << endl;
}


